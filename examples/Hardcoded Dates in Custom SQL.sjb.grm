/*
 * Hardcoded Dates in Custom SQL
 *
 * Rationale:
 * Dates in SQL are an indicator of a once-off fix that may cause issues if run again.
 * Dates should either be dynamically determined by the job logic to be consistently repeatable,
 * of defined in a place that is visible outside of custom SQL statements, eg at the project level. 
 *
 */

  // Dates
  def dateFormats = [
  '.*[12]\\d{3}[/-](0[1-9]|1[0-2])[/-](0[1-9]|[12]\\d|3[01]).*', //YYYYMMDD
  '.*(0[1-9]|[12]\\d|3[01])[/-](0[1-9]|1[0-2])[/-][12]\\d{3}.*', //DDMMYYYY
  '.*(0[1-9]|1[0-2])[/-](0[1-9]|[12]\\d|3[01])[/-][12]\\d{3}.*', //MMDDYYYY
  '.*\\d{2}[/-](0[1-9]|1[0-2])[/-](0[1-9]|[12]\\d|3[01]).*',     //YYMMDD
  '.*(0[1-9]|[12]\\d|3[01])[/-](0[1-9]|1[0-2])[/-]\\d{2}.*',     //DDMMYY
  '.*(0[1-9]|1[0-2])[/-](0[1-9]|[12]\\d|3[01])[/-]\\d{2}.*',      //MMDDYY
  '.*(\\d|0[1-9]|[12]\\d|3[01]) (jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec) [12]\\d{3}.*'      //DD MMM YYYY
] as Set

 // stage to file property mapping
def connectorProperties = [
   'DB2Connector',
   'DRSConnector',
   'NetezzaConnector',
   'ODBCConnector', 
   'OracleConnector',
   'TeradataConnector'
] as Set

def type1Stages = [
    'CODBCStage', // ODBC Data Access
    'CUvStage' // Universe Data Access
] as Set

def type2Stages = [
    'DSDB2', // DB2 Stage has been deprecated
    'DRS', // Dynamic RDBMS Stage has been DEPRECATED
    'InfmxCLI', // Informix Data Access
    'ORAOCI9', // Oracle OCI Load has been DEPRECATED 
    'SYBASEOC', // Sybase Data Access
    'Teradata' // Teradata Stage has been DEPRECATED
] as Set

def type3Stages = [
    'CUniDataStage' // Unidata Data Access
] as Set


 def CheckForHardcodedDates = { stage ->

    def userModeFlag = null;
    def sql = null;

    // Check against Connectors
    if (connectorProperties.contains(stage.stageType)) {
		if (stage["XMLProperties"] != null) {
            def genSQLMode = Eval.x(stage["XMLProperties"], "x.Usage.GenerateSQL").toString();

            if (genSQLMode.toLowerCase() == 'false' || genSQLMode == '0') {
			    sql = Eval.x(stage["XMLProperties"], "x.Usage.SQL.SelectStatement")?.toString().toLowerCase().replace('\n',' ');
            } else { 
                return false;
            }
        } else {
            return false;
        }
    }

    // Each of the older and deprecated Stages will be one of a couple of styles 
    def sqlModeFlag = null;

    if (type1Stages.contains(stage.stageType)) {
        def userDefSQLFlag = stage.out.pin.property("SqlUser").next();

        if (!userDefSQLFlag) {
            return false;
        }

        def isUserDefSQL = userDefSQLFlag.toString() == '1'? true:false;

        if (isUserDefSQL) {
            sql = stage.out.pin.property("SQLPrimary").collect().join(" ").replace("null","").toLowerCase();
            if (sql == null | sql == "") {
                sql = stage.out.pin.property("SQLRef").collect().join(" ").replace("null","").toLowerCase();
            }
        }
    }

    if (type2Stages.contains(stage.stageType)) {
        switch(stage.out.pin.property("GENSQL").next().toString().toLowerCase()) {
            case "yes":
            case "y":
                // Generated
            case "no":
            case "n":
                // User
                sql =  stage.out.pin.property("USERSQL").next().toString().toLowerCase().replace("null","");
                break;
            case "fullygensql":
                // To be honest I don't expect to hit this as I'd expect the column names to be specified
                sql =  stage.out.pin.property("FULLYGENSQL").next().toString().toLowerCase()
                        .replace("null","")
                        .replace("&#xd;","").replace("&#xa;","").replace("&#x9;","");
                break;
            default:
                return false;
        }
    }

    if (type3Stages.contains(stage.stageType) && stage.out) {
        // Ignore. It doesn't look like UniData Stages can have a SELECT *
    }

    if (sql != null) {
        return dateFormats.any{ dateFormat -> sql.matches(dateFormat) };
    }

    return false;
}

item.graph.V.stage.filter(CheckForHardcodedDates)
    .comply{"${config.readableStageTypes[it.stageType] ?: it.stageType} '${it.stageName}' contains hard-coded dates in user defined SQL."}

