/*
 * "Select *" in Custom SQL
 *
 * Rationale:
 * Using Select * in custom SQL code may be indicative of:
 * - SQL code that has been directly lifted from a SQL editor and inserted in to DataStage without further analysis or consideration
 * - code that ignores future changes to the source and possibly produces misleading errors in the DataStage logs
 *
 */

def selectStarFormats = [
    ".*select\\s+[*]\\s+from\\s+.*",
    ".*select\\s+.*[.][*].*\\s+from\\s+.*"
] as Set

 // stage to file property mapping
def connectorProperties = [
   'CognosTM1ConnectorPX',  // Provisional. Requires an actual TM1 source to configure.
   'DB2ConnectorPX',
   'DRSConnectorPX',
   'GreenplumConnectorPX',
   'HiveConnectorPX',
   'JDBCConnectorPX',
   'NetezzaConnectorPX',
   'ODBCConnectorPX',
   'OracleConnectorPX',
   'SnowflakeConnectorPX',
   'TeradataConnectorPX'
] as Set

defEnterpriseStages = [
    'PxDB2', 
    'PxInformixXPS',
    'PxOdbc',
    'PxOracle',
    'Pxsqlsvr',
    'PxSybase',
    'PxTeradata'
] as Set

def type1Stages = [
    'PXClassicFederation',
    'Pxiway',
    'PxNetezza'
] as Set

def type2Stages = [
    'DSDB2PX',         // DB2 Stage has been deprecated
    'DRSPX',           // Dynamic RDBMS Stage has been DEPRECATED
    'InfmxCLIPX',      // Informix Data Access
    'SYBASEOCPX',      // Sybase Data Access
    'TeradataPX'       // Teradata Stage has been DEPRECATED
] as Set

def type3Stages = [
    'PxDB2Z' // DB2Z has been DEPRECATED
] as Set

 def CheckForSelectStar = { stage ->
    def userModeFlag = null;
    def sql = null;

    // Check against Connectors
    if (connectorProperties.contains(stage.stageType)) {

		if (stage["XMLProperties"] != null) {
            def genSQLMode = Eval.x(stage["XMLProperties"], "x.Usage.GenerateSQL").toString();

            if (genSQLMode.toLowerCase() == 'false' || genSQLMode == '0') {
			    sql = Eval.x(stage["XMLProperties"], "x.Usage.SQL.SelectStatement")?.toString().toLowerCase().replace('\n',' ');
            } else { 
                return false;
            }
        } else {
            return false;
        }
    }

    // Each of the older and deprecated Stages will be one of a couple of styles 
    def sqlModeFlag = null;

    // Enterprise and Type 1 stages are stored in separate buckets
    // but handled the same bacause Enterprise stages also have SQL builder mode and Type 1 doesn't.
    // For the modes we care about, the info for both is stored in the places in the same way.
    if ((defEnterpriseStages.contains(stage.stageType) 
        || type1Stages.contains(stage.stageType))
        &&  (stage.out)) {
        switch(stage.out.pin.selection.next().toString().toLowerCase()) {
            case "query": 
                //Generated - Not relevant for Type 3
            case "userquery":
                sql = stage.out.pin.property("query").next().toString().toLowerCase().replace("null","");
                break;
            default:
                return false;
                break;
        }
    }

    if (type2Stages.contains(stage.stageType) && stage.out) {
        switch(stage.out.pin.property("GENSQL").next().toString().toLowerCase()) {
            case "yes":
            case "y":
                // Generated
            case "no":
            case "n":
                // User
                sql = stage.out.pin.property("USERSQL").next().toString().toLowerCase().replace("null","");
                break;
            default:
                return false;
                break;
        }
    }

    if (type3Stages.contains(stage.stageType) && stage.out) {
        if (stage.out.pin.property("selection").next().toString().toLowerCase() == "userquery") {
            sql = stage.out.pin.property("USERSQL").next().toString().toLowerCase().replace("null","");
        }
        else {
            return false;
        }
    }
    
    if (sql != null) {
        return selectStarFormats.any{ selectFormat -> sql= ~selectFormat };
    }

    return false;
}

item.graph.V.stage.filter(CheckForSelectStar)
    .comply{"${config.readableStageTypes[it.stageType] ?: it.stageType} '${it.stageName}' contains SELECT * in user defined SQL."}
